#!/bin/bash

# Takes a processed GeSeq and EMBOSS Seqret generated GFF file and renumbers IDs, etc. based on Genbank Submission requirements
# Processed: duplicates have been removed as to not interfere with the numbering process
# Scaffold will be renamed in this script.

if [ "$#" -ne 1 ]
then
	echo "USAGE: $(basename $0) <GFF file>" 1>&2
	echo "EXAMPLE: $(basename $0) Se404-851cp.gff" 1>&2
	echo "DESCRIPTION: Takes a processed GeSeq and EMBOSS Seqret generated GFF file, and renumbers IDs, etc. based on Genbank Submission requirements. Processed: duplicates have been removed as to not interfere with the numbering process." 1>&2
	exit 1
fi

file=$1
filename=$(basename $file ".gff")

temp=temp.gff
output=${filename}.numbered.gff

IFS=$'\n'

gene_count=1
mRNA_count=1
tRNA_count=1
rRNA_count=1

# Default name of the scaffold as assigned by GeSeq
code=$(awk 'NR==2' $file | awk '{print $2}')
length=$(awk 'NR==2' $file | awk '{print $4}')
if [ -e $output ]
then
	rm $output
fi

# GeSeq gives every single feature its own ID, despite it being a 'children' feature
sed 's/Parent=/ID=/' $file > $temp

# GeSeq annotates certain mRNAs as 'biological regions'
sed -i 's/biological_region/mRNA/' $temp

# Remove trailing spaces
sed -i 's/[[:space:]]\+$//' $temp

# Add trailing semicolons as they are part of patterns in the sed regex below
sed -i 's/$/;/' $temp

# GFF header so that it can be read by IGV correctly 
echo -e "##gff-version 3\n##sequence-region $filename 1 $length" > $output

for line in $(cat $temp)
do
	## Stops 'reading' when the FASTA sequence is reached if it hasn't been removed at this point
	if [[ "$line" == ##FASTA* ]]
	then
		break
	fi
	feature=$(echo $line | awk '{print $3}')
	case $feature in
		gene)
			name=$(echo $line | awk '/gene=/ {print $9}' | awk -F ";" '{print $2}' | awk -F "=" '{print $2}')
			echo $line | sed "s/ID=${code}\.[0-9]\+/ID=gene${gene_count}/" | sed "s/$/Name=${name}/" >> $output
			gene_count=$((gene_count + 1)) 
			feat="gene"
			;;
		mRNA)
			echo $line |  sed "s/ID=${code}\.[0-9]\+/ID=mRNA${mRNA_count}/" | sed "s/gene=\w\+-\?\.\?\w*;\?/Parent=gene$((gene_count-1));/" | sed "s/$/gene=${name}/" | sed 's/\t[0-2]\tID/\t\.\tID/' >> $output
			mRNA_count=$((mRNA_count+1))
			feat="mRNA"
			;;
		rRNA)
			echo $line | sed "s/ID=${code}\.[0-9]\+/ID=rRNA${rRNA_count}/" | sed "s/gene=\w\+-\?\w*;\?/Parent=gene$((gene_count-1));/" | sed "s/$/gene=${name}/" >> $output
			rRNA_count=$((rRNA_count+1))
			feat="rRNA"
			;;
		tRNA)
			echo $line | sed "s/ID=${code}\.[0-9]\+/ID=tRNA${tRNA_count}/" | sed "s/gene=\w\+-\?\w*;\?/Parent=gene$((gene_count-1));/" | sed "s/$/gene=${name}/" >> $output
			tRNA_count=$((tRNA_count+1))
			feat="tRNA"
			;;
		exon)
			
			case $feat in
				mRNA) 
					echo $line | sed "s/ID=${code}\.[0-9]\+/Parent=mRNA$((mRNA_count-1))/" | sed 's/gene=\w\+-\?\w*;\?//' | sed "s/$/gene=${name}/"  >> $output
					;;
				tRNA)
					echo $line | sed "s/ID=${code}\.[0-9]\+/Parent=tRNA$((tRNA_count-1))/" | sed 's/gene=\w\+-\?\w*;\?//' | sed "s/$/gene=${name}/"  >> $output
					;;
				rRNA)
					echo $line |  sed "s/ID=${code}\.[0-9]\+/Parent=rRNA$((rRNA_count-1))/" | sed 's/gene=\w\+-\?\w*;\?//'| sed "s/$/gene=${name}/"  >> $output
					;;
				*)
					;;
			esac
			;;
		CDS)
			case $feat in
				mRNA) 
					echo $line |  sed "s/ID=${code}\.[0-9]\+/Parent=mRNA$((mRNA_count-1))/" | sed 's/gene=\w\+-\?\w*;\?//' | sed "s/$/gene=${name}/" | sed 's/$/;/' |  sed "s/$/Name=CDS-${name}/" >> $output
					;;
				tRNA)
					echo $line | sed "s/ID=${code}\.[0-9]\+/Parent=tRNA$((tRNA_count-1))/" | sed 's/gene=\w\+-\?\w*;\?//' | sed "s/$/gene=${name}/" | sed 's/$/;/' | sed "s/$/Name=CDS-${name}/"  >> $output
					;;
				rRNA)
					echo $line | sed "s/ID=${code}\.[0-9]\+/Parent=rRNA$((rRNA_count-1))/" | sed 's/gene=\w\+-\?\w*;\?//' | sed "s/$/gene=${name}/" | sed 's/$/;/' | sed "s/$/Name=CDS-${name}/"  >> $output
					;;
				*)
					;;
			esac
			;;
		intron)
			case $feat in
				mRNA) 
					echo $line | sed "s/ID=${code}\.[0-9]\+/Parent=mRNA$((mRNA_count-1))/" | sed 's/gene=\w\+-\?\w*;\?//' | sed "s/$/gene=${name}/"  >> $output
					;;
				tRNA)
					echo $line | sed "s/ID=${code}\.[0-9]\+/Parent=tRNA$((tRNA_count-1))/" | sed 's/gene=\w\+-\?\w*;\?//' | sed "s/$/gene=${name}/"  >> $output
					;;
				rRNA)
					echo $line | sed "s/ID=${code}\.[0-9]\+/Parent=rRNA$((rRNA_count-1))/" | sed 's/gene=\w\+-\?\w*;\?//' | sed "s/$/gene=${name}/"  >> $output
					;;
				*)
					;;
			esac
			;;
		*)
			# This allows us to lose the ##comment lines generated by GeSeq
		#	echo $line >> $output
			;;
esac
done

# Change the 'scaffold' name
sed -i "s/$code/$filename/" $output

# Change tool to GeSeq
sed -i 's/EMBL/GeSeq/' $output

# Remove featflags
sed -i 's/featflags=type:CDS;//' $output

# Remove copy number
sed -i 's/number=[0-9];\?//' $output

# Remove trailing semicolons
sed -i 's/;$//' $output
rm $temp
